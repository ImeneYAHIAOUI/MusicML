"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, privateMap, value) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
    }
    privateMap.set(receiver, value);
    return value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
    }
    return privateMap.get(receiver);
};
var _callbacks;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Omnibus = void 0;
const Registrator_1 = require("./Registrator");
class Omnibus {
    constructor() {
        _callbacks.set(this, void 0);
        __classPrivateFieldSet(this, _callbacks, new Map());
    }
    on(event, fn) {
        if (!__classPrivateFieldGet(this, _callbacks).has(event)) {
            __classPrivateFieldGet(this, _callbacks).set(event, []);
        }
        const arr = __classPrivateFieldGet(this, _callbacks).get(event);
        arr.push(fn);
        return () => {
            this.off(event, fn);
        };
    }
    off(event, fn) {
        const callbacks = __classPrivateFieldGet(this, _callbacks).get(event) || [];
        __classPrivateFieldGet(this, _callbacks).set(event, callbacks.filter(f => f !== fn));
    }
    offAll() {
        __classPrivateFieldSet(this, _callbacks, new Map());
    }
    async trigger(event, ...args) {
        const calls = __classPrivateFieldGet(this, _callbacks).get(event) || [];
        return Promise.all(calls.map(c => c(...args))).then(() => { return; });
    }
    getRegistrator() {
        return new Registrator_1.OmnibusRegistrator(this);
    }
}
exports.Omnibus = Omnibus;
_callbacks = new WeakMap();
//# sourceMappingURL=Omnibus.js.map