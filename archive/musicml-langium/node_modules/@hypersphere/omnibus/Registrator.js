"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, privateMap, value) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
    }
    privateMap.set(receiver, value);
    return value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
    }
    return privateMap.get(receiver);
};
var _bus, _registered;
Object.defineProperty(exports, "__esModule", { value: true });
exports.OmnibusRegistrator = void 0;
class OmnibusRegistrator {
    constructor(bus) {
        _bus.set(this, void 0);
        _registered.set(this, void 0);
        __classPrivateFieldSet(this, _bus, bus);
        __classPrivateFieldSet(this, _registered, []);
    }
    on(event, fn) {
        __classPrivateFieldGet(this, _bus).on(event, fn);
        __classPrivateFieldGet(this, _registered).push({
            name: event,
            fn: fn,
        });
        return () => {
            this.off(event, fn);
        };
    }
    off(name, fn) {
        const properCall = __classPrivateFieldGet(this, _registered).find((entry) => entry.name === name && entry.fn === fn);
        if (!properCall) {
            throw new Error("Event you are trying to unregister was not registered via this Registrator");
        }
        this.off(name, fn);
        __classPrivateFieldSet(this, _registered, __classPrivateFieldGet(this, _registered).filter((entry) => !(entry.name === name && entry.fn === fn)));
    }
    offAll() {
        __classPrivateFieldGet(this, _registered).forEach(({ name, fn }) => {
            __classPrivateFieldGet(this, _bus).off(name, fn);
        });
        __classPrivateFieldSet(this, _registered, []);
    }
}
exports.OmnibusRegistrator = OmnibusRegistrator;
_bus = new WeakMap(), _registered = new WeakMap();
//# sourceMappingURL=Registrator.js.map