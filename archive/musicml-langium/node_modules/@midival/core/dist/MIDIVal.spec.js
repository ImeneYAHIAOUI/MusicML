"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("./index");
const MIDIval_1 = require("./MIDIval");
const MockMIDIAccess_1 = require("./wrappers/access/MockMIDIAccess");
const MockMIDIInput_1 = require("./wrappers/inputs/MockMIDIInput");
describe("MIDIVal", () => {
    let mockMidiAccess = null;
    beforeEach(() => {
        mockMidiAccess = new MockMIDIAccess_1.MockMIDIAccess();
        index_1.MIDIVal.configureAccessObject(mockMidiAccess);
    });
    it("Should get proper access object", () => __awaiter(void 0, void 0, void 0, function* () {
        const accessObject = yield index_1.MIDIVal.connect();
        expect(accessObject.constructor).toEqual(MockMIDIAccess_1.MockMIDIAccess);
    }));
    it("matchesConfig should work properly", () => {
        let input = new MockMIDIInput_1.MockMIDIInput({
            id: "1",
            name: "MIDI Input",
            manufacturer: "MIDIVal",
        });
        expect((0, MIDIval_1.matchesConfig)(input, { name: "MIDI Input" })).toEqual(true);
        expect((0, MIDIval_1.matchesConfig)(input, { name: "XXX" })).toEqual(false);
        expect((0, MIDIval_1.matchesConfig)(input, {})).toEqual(true);
        expect((0, MIDIval_1.matchesConfig)(input, { name: /MIDI/ })).toEqual(true);
        expect((0, MIDIval_1.matchesConfig)(input, { name: /MIDI/, manufacturer: "XXX" })).toEqual(false);
    });
    it("should properly filter input devices", () => __awaiter(void 0, void 0, void 0, function* () {
        mockMidiAccess.addInput({
            id: "1",
            name: "Device 1",
            manufacturer: "MIDIVal",
        });
        mockMidiAccess.addInput({
            id: "2",
            name: "Device 2",
            manufacturer: "MIDIVal",
        });
        mockMidiAccess.addInput({
            id: "3",
            name: "Device 3",
            manufacturer: "MIDIVal",
        });
        mockMidiAccess.addInput({ id: "4", name: "Device 4", manufacturer: "XXX" });
        const fn = jest.fn();
        yield index_1.MIDIVal.onInputDeviceWithConfigConnected({
            manufacturer: "MIDIVal",
        }, fn, true);
        expect(fn).toBeCalledTimes(3);
    }));
    it("should properly filter output devices", () => __awaiter(void 0, void 0, void 0, function* () {
        mockMidiAccess.addOutput({
            id: "1",
            name: "Device 1",
            manufacturer: "MIDIVal",
        });
        mockMidiAccess.addOutput({
            id: "2",
            name: "Device 2",
            manufacturer: "MIDIVal",
        });
        mockMidiAccess.addOutput({
            id: "3",
            name: "Device 3",
            manufacturer: "MIDIVal",
        });
        mockMidiAccess.addOutput({
            id: "4",
            name: "Device 4",
            manufacturer: "XXX",
        });
        const fn = jest.fn();
        yield index_1.MIDIVal.onOutputDeviceWithConfigConnected({
            manufacturer: "MIDIVal",
        }, fn, true);
        expect(fn).toBeCalledTimes(3);
    }));
    it("should properly call input device connected / disconnected", () => __awaiter(void 0, void 0, void 0, function* () {
        const fn = jest.fn();
        yield index_1.MIDIVal.onInputDeviceConnected(fn);
        expect(fn).not.toBeCalled();
        const deviceProps = { id: "1", name: "D1", manufacturer: "MIDI" };
        const device = mockMidiAccess.addInput(deviceProps);
        expect(fn).toBeCalledTimes(1);
        expect(fn).toBeCalledWith(device);
        const disconnect = jest.fn();
        yield index_1.MIDIVal.onInputDeviceDisconnected(disconnect);
        expect(disconnect).not.toBeCalled();
        mockMidiAccess.removeInput(device);
        expect(disconnect).toBeCalledTimes(1);
        expect(disconnect).toBeCalledWith(device);
    }));
    it("should properly call output device connected / disconnected", () => __awaiter(void 0, void 0, void 0, function* () {
        const fn = jest.fn();
        yield index_1.MIDIVal.onOutputDeviceConnected(fn);
        expect(fn).not.toBeCalled();
        const deviceProps = { id: "1", name: "D1", manufacturer: "MIDI" };
        const device = mockMidiAccess.addOutput(deviceProps);
        expect(fn).toBeCalledTimes(1);
        expect(fn).toBeCalledWith(device);
        const disconnect = jest.fn();
        yield index_1.MIDIVal.onOutputDeviceDisconnected(disconnect);
        expect(disconnect).not.toBeCalled();
        mockMidiAccess.removeOutput(device);
        expect(disconnect).toBeCalledTimes(1);
        expect(disconnect).toBeCalledWith(device);
    }));
});
