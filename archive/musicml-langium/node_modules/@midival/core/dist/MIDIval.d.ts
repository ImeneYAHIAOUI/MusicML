import { MIDIValInput } from "./MIDIValInput";
import { MIDIValOutput } from "./MIDIValOutput";
import { IMIDIInput } from "./wrappers/inputs/IMIDIInput";
import { IMIDIOutput } from "./wrappers/outputs/IMIDIOutput";
import { IMIDIAccess } from "./wrappers/access/IMIDIAccess";
import { CallbackType, UnregisterCallback } from "@hypersphere/omnibus";
export interface ConfigScheme {
    name?: string | RegExp;
    manufacturer?: string | RegExp;
}
export declare const matchesConfig: (input: IMIDIInput | IMIDIOutput, scheme: ConfigScheme) => boolean;
export declare class MIDIVal {
    private static isSetupComplete;
    private static accessObject;
    /**
     * Allows to reconfigure access object to use project in different environment as the default one (browser): See @midival/node, @midival/react-native for more details.
     * @param newAccess Implementation of IMIDIAccess to be used to provide MIDI objects.
     */
    static configureAccessObject(newAccess: IMIDIAccess): void;
    /**
     * Calls callback on every input device that gets connected.
     * @param callback Callback to be registered
     * @param callOnAlreadyConnected If set to true, the function will instantly trigger for all already connected devices. Default to false
     * @returns Promise resolving to unregister callback when finishes.
     */
    static onInputDeviceConnected(callback: CallbackType<[IMIDIInput]>, callOnAlreadyConnected?: boolean): Promise<UnregisterCallback>;
    /**
     * Listens to all input devices with a certain config (like name or manufacturer). Configuration can be provided as a string or regex. The callback unlike `onInputDeviceConnected` accepts MIDIValInput. `onInputDeviceConnected` is suitable when you want to filter devices yourself, beyond this configuration object so it does not instantiate objects.
     * @param config Configuration object used to match with device connected
     * @param fn Callback on connection. Connection is already wrapped in MIDIValInput object
     * @returns Promise for Unregister Callback
     */
    static onInputDeviceWithConfigConnected(config: ConfigScheme, fn: (input: MIDIValInput) => void, callOnAlreadyConnected?: boolean): Promise<UnregisterCallback>;
    /**
     * Listens to all output devices with a certain config (like name or manufacturer). Configuration can be provided as a string or regex. The callback unlike `onOutputDeviceConnected` accepts MIDIValOutput. `onOutputDeviceConnected` is suitable when you want to filter devices yourself, beyond this configuration object so it does not instantiate objects.
     * @param config Configuration object used to match with device connected
     * @param fn Callback on connection. Connection is already wrapped in MIDIValOutput object
     * @returns Promise for Unregister Callback
     */
    static onOutputDeviceWithConfigConnected(config: ConfigScheme, fn: (output: MIDIValOutput) => void, callOnAlreadyConnected?: boolean): Promise<UnregisterCallback>;
    /**
     * Calls callback on every output device that gets connected.
     * @param callback Callback to be registered
     * @param callOnAlreadyConnected If set to true, the function will instantly trigger for all already connected devices. Default to false
     * @returns Promise resolving to unregister callback when finishes.
     */
    static onOutputDeviceConnected(callback: CallbackType<[IMIDIOutput]>, callOnAlreadyConnected?: boolean): Promise<UnregisterCallback>;
    /**
     * Regusters callback on an event of input device being disconnected.
     * @param callback Callback to be called.
     * @returns promise resolving to unregister callback
     */
    static onInputDeviceDisconnected(callback: CallbackType<[IMIDIInput]>): Promise<UnregisterCallback>;
    /**
     * Regusters callback on an event of input device being disconnected.
     * @param callback Callback to be called.
     * @returns promise resolving to unregister callback
     */
    static onOutputDeviceDisconnected(callback: CallbackType<[IMIDIOutput]>): Promise<UnregisterCallback>;
    /**
     * Creates MIDIValInput instance from implementation of IMIDIInput interface.
     * @param input Implementation of IMIDIInput interface
     * @returns MIDIValInput object
     */
    static fromMIDIInput(input: IMIDIInput): MIDIValInput;
    /**
     * Creates MIDIValOutput instance from implementation of IMIDIOut interface
     * @param output Implementation of IMIDIOutput interface
     * @returns MIDIValOutput object
     */
    static fromMIDIOutput(output: IMIDIOutput): MIDIValOutput;
    /**
     * Connects to MIDI interface and returns implementation of IMIDIAccess
     * @returns Promise resolving to IMIDIAccess
     */
    static connect(): Promise<IMIDIAccess>;
    private static setupDeviceWatchers;
}
