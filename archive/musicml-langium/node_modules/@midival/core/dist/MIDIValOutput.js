"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MIDIValOutput = void 0;
const index_1 = require("./index");
const pitchBend_1 = require("./utils/pitchBend");
const midiCommands_1 = require("./utils/midiCommands");
const midiControlChanges_1 = require("./utils/midiControlChanges");
const midiRegisteredParameters_1 = require("./utils/midiRegisteredParameters");
const delay = (n) => new Promise((resolve) => setInterval(resolve, n));
class MIDIValOutput {
    constructor(output) {
        this.midiOutput = output;
        this.defaultChannel = 1;
    }
    /**
     * Sends raw message to MIDI out
     * @param msgs Message as an array of UInt8 values
     * @returns
     */
    send(msgs) {
        if (!this.midiOutput) {
            return;
        }
        this.midiOutput.send(msgs);
    }
    /**
     * Changes default channel the messages are sent on
     * @param channel Channel value. Integer between 1 and 16
     */
    setChannel(channel) {
        this.defaultChannel = channel;
    }
    getChannel(channel) {
        if (!channel) {
            return this.defaultChannel - 1;
        }
        return channel - 1;
    }
    /**
     * Creates MIDIValOutput based on the interface name
     * @param interfaceName Name of the interface
     * @returns MIDIValOutput object
     */
    static fromInterfaceName(interfaceName) {
        return __awaiter(this, void 0, void 0, function* () {
            const midiAccess = yield this.getMidiAccess();
            const output = midiAccess.outputs.find(({ name }) => name === interfaceName);
            if (!output) {
                throw new Error(`${interfaceName} not found`);
            }
            return new MIDIValOutput(output);
        });
    }
    static getMidiAccess() {
        return __awaiter(this, void 0, void 0, function* () {
            const midiAccess = yield index_1.MIDIVal.connect();
            return midiAccess;
        });
    }
    /**
     * Sends note on message
     * @param note Note key value to be sent.
     * @param velocity Velocity - number between 0 and 128
     * @param channel Channel. By default will use channel set by setChannel method
     * @returns
     */
    sendNoteOn(note, velocity, channel) {
        return this.send([
            midiCommands_1.MidiCommand.NoteOn + this.getChannel(channel),
            note,
            velocity,
        ]);
    }
    /**
     * Sends note off message.
     * @param note Note key to be set off
     * @param channel Channel. By default will use channel set by setChannel method
     * @returns
     */
    sendNoteOff(note, channel) {
        return this.send([midiCommands_1.MidiCommand.NoteOff + this.getChannel(channel), note, 0]);
    }
    sendPolyKeyPressure(key, velocity, channel) {
        return this.send([
            midiCommands_1.MidiCommand.PolyKeyPressure + this.getChannel(channel),
            key,
            velocity,
        ]);
    }
    sendControlChange(controller, value, channel) {
        // FIXME: channel mode check here
        return this.send([
            midiCommands_1.MidiCommand.ControlChange + this.getChannel(channel),
            controller,
            value,
        ]);
    }
    sendProgramChange(program, channel) {
        return this.send([
            midiCommands_1.MidiCommand.ProgramChange + this.getChannel(channel),
            program,
        ]);
    }
    sendChannelPressure(velocity, channel) {
        return this.send([
            midiCommands_1.MidiCommand.ChannelPressure + this.getChannel(channel),
            velocity,
        ]);
    }
    /**
     * Sends pitch bend value.
     * @param bendValue Ben value ranging from -1.0 to 1.0.
     * @param channel Optional channel on which bend should be sent on
     * @returns
     * @throws Throws exception if bendValue is outside the range.
     */
    sendPitchBend(bendValue, channel) {
        return this.send(new Uint8Array([
            midiCommands_1.MidiCommand.PitchBend + this.getChannel(channel),
            ...(0, pitchBend_1.fractionToPitchBendAsUints)(bendValue),
        ]));
    }
    // Special Channel Modes
    sendAllSoundOff(channel) {
        return this.send([
            midiCommands_1.MidiCommand.ControlChange + this.getChannel(channel),
            midiControlChanges_1.MidiControlChange.AllSoundsOff,
            0,
        ]);
    }
    sendResetAllControllers(channel) {
        // v = x: Value must only be zero unless otherwise allowed in a specific Recommended Practice.
        return this.send([
            midiCommands_1.MidiCommand.ControlChange + this.getChannel(channel),
            midiControlChanges_1.MidiControlChange.ResetAllControllers,
            0,
        ]);
    }
    sendLocalControlOff(channel) {
        return this.send([
            midiCommands_1.MidiCommand.ControlChange + this.getChannel(channel),
            midiControlChanges_1.MidiControlChange.LocalControlOnOff,
            0,
        ]);
    }
    sendLocalControlOn(channel) {
        return this.send([
            midiCommands_1.MidiCommand.ControlChange + this.getChannel(channel),
            midiControlChanges_1.MidiControlChange.LocalControlOnOff,
            127,
        ]);
    }
    sendAllNotesOff(channel) {
        return this.send([
            midiCommands_1.MidiCommand.ControlChange + this.getChannel(channel),
            midiControlChanges_1.MidiControlChange.AllNotesOff,
            0,
        ]);
    }
    sendClockStart() {
        return this.send([midiCommands_1.MidiCommand.Clock.Start]);
    }
    sendClockStop() {
        return this.send([midiCommands_1.MidiCommand.Clock.Stop]);
    }
    sendClockContinue() {
        return this.send([midiCommands_1.MidiCommand.Clock.Continue]);
    }
    sendClockPulse() {
        return this.send([midiCommands_1.MidiCommand.Clock.Pulse]);
    }
    // RPN
    sendRPNSelection([msb, lsb], channel) {
        this.sendControlChange(midiControlChanges_1.MidiControlChange.RegisteredParameterNumberMSB, msb, channel);
        this.sendControlChange(midiControlChanges_1.MidiControlChange.RegisteredParameterNumberLSB, lsb, channel);
    }
    sendRPDataMSB(data, channel) {
        this.sendControlChange(midiControlChanges_1.MidiControlChange.DataEntryMSB, data, channel);
    }
    sendRPDataLSB(data, channel) {
        this.sendControlChange(midiControlChanges_1.MidiControlChange.DataEntryLSB, data, channel);
    }
    incrementRPData(incrementValue, channel) {
        this.sendControlChange(midiControlChanges_1.MidiControlChange.DataIncrement, incrementValue, channel);
    }
    decrementRPData(decrementValue, channel) {
        this.sendControlChange(midiControlChanges_1.MidiControlChange.DataDecrement, decrementValue, channel);
    }
    sendRPNNull() { }
    initializeMPE(lowerChannelSize, upperChannelSize, messageDelayMs = 100) {
        return __awaiter(this, void 0, void 0, function* () {
            this.sendRPNSelection(midiRegisteredParameters_1.MIDIRegisteredParameters.MPE_CONFIGURATION_MESSAGE, 1);
            yield delay(messageDelayMs);
            this.sendRPDataMSB(lowerChannelSize, 1);
            yield delay(messageDelayMs);
            this.sendRPDataMSB(upperChannelSize, 16);
            yield delay(messageDelayMs);
            this.sendRPNNull();
            yield delay(messageDelayMs);
        });
    }
    setPitchBendSensitivity(semitones, cents, channel, messageDelayMs = 100) {
        return __awaiter(this, void 0, void 0, function* () {
            // FIXME: probably calculate it here?
            this.sendRPNSelection(midiRegisteredParameters_1.MIDIRegisteredParameters.PITCH_BEND_SENSITIVITY, channel);
            yield delay(messageDelayMs);
            this.sendRPDataMSB(semitones, channel);
            yield delay(messageDelayMs);
            this.sendRPNNull();
        });
    }
}
exports.MIDIValOutput = MIDIValOutput;
