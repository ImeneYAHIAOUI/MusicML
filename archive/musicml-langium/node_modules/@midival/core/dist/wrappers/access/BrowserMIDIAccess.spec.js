"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @jest-environment jsdom
 */
const omnibus_1 = require("@hypersphere/omnibus");
const BrowserMIDIAccess_1 = require("./BrowserMIDIAccess");
const _bus = new omnibus_1.Omnibus();
const access = {
    inputs: new Map(),
    outputs: new Map(),
    onstatechange: jest.fn(),
    addEventListener: jest.fn((event, callback) => _bus.on(event, callback)),
    sysexEnabled: false,
    dispatchEvent: jest.fn(),
    removeEventListener: jest.fn(),
};
describe("BrowserMIDIAccess", () => {
    beforeAll(() => {
        // @ts-ignore
        navigator.requestMIDIAccess = (options) => Promise.resolve(access);
    });
    it("should properly instantiate BrowserMIDIAccess", () => __awaiter(void 0, void 0, void 0, function* () {
        const accessObject = new BrowserMIDIAccess_1.BrowserMIDIAccess();
        yield accessObject.connect();
        expect(access.addEventListener).toBeCalledTimes(1);
    }));
    it("should properly add event listeners for inputs", () => __awaiter(void 0, void 0, void 0, function* () {
        const accessObject = new BrowserMIDIAccess_1.BrowserMIDIAccess();
        yield accessObject.connect();
        const inputConnectedCallback = jest.fn();
        accessObject.onInputConnected(inputConnectedCallback);
        access.inputs.set("1234", {
            id: "1234",
        });
        _bus.trigger("statechange", {
            port: {
                type: "input",
                state: "connected",
                id: "1234",
            },
        });
        expect(inputConnectedCallback).toBeCalledTimes(1);
        const inputDisconnectedCallback = jest.fn();
        accessObject.onInputDisconnected(inputDisconnectedCallback);
        _bus.trigger("statechange", {
            port: {
                type: "input",
                state: "disconnected",
                id: "1234",
            },
        });
        expect(inputDisconnectedCallback).toBeCalledTimes(1);
    }));
    it("should properly add event listeners for outputs", () => __awaiter(void 0, void 0, void 0, function* () {
        const accessObject = new BrowserMIDIAccess_1.BrowserMIDIAccess();
        yield accessObject.connect();
        const outputConnectedCallback = jest.fn();
        accessObject.onOutputConnected(outputConnectedCallback);
        access.outputs.set("1234", {
            id: "1234",
        });
        _bus.trigger("statechange", {
            port: {
                type: "output",
                state: "connected",
                id: "1234",
            },
        });
        expect(outputConnectedCallback).toBeCalledTimes(1);
        const outputDisconnectedCallback = jest.fn();
        accessObject.onOutputDisconnected(outputDisconnectedCallback);
        _bus.trigger("statechange", {
            port: {
                type: "output",
                state: "disconnected",
                id: "1234",
            },
        });
        expect(outputDisconnectedCallback).toBeCalledTimes(1);
    }));
    it("should throw error when there's no navigator.requestMIDIAccess", () => {
        const accessObject = new BrowserMIDIAccess_1.BrowserMIDIAccess();
        const prevNav = navigator.requestMIDIAccess;
        navigator.requestMIDIAccess = null;
        expect(accessObject.connect()).rejects.toEqual(new Error("requestMIDIAccess not available, make sure you are using MIDI-compatible browser."));
        navigator.requestMIDIAccess = prevNav;
    });
    it("should properly return inputs", () => __awaiter(void 0, void 0, void 0, function* () {
        const accessObject = new BrowserMIDIAccess_1.BrowserMIDIAccess();
        access.inputs.clear();
        access.inputs.set("1234", {
            type: "input",
            id: "1234",
            name: "MIDI In",
        });
        yield accessObject.connect();
        expect(accessObject.inputs).toHaveLength(1);
        expect(accessObject.inputs[0].name).toEqual("MIDI In");
    }));
    it("should properly return outputs", () => __awaiter(void 0, void 0, void 0, function* () {
        const accessObject = new BrowserMIDIAccess_1.BrowserMIDIAccess();
        access.outputs.clear();
        access.outputs.set("1234", {
            type: "output",
            id: "1234",
            name: "MIDI Out",
        });
        yield accessObject.connect();
        expect(accessObject.outputs).toHaveLength(1);
        expect(accessObject.outputs[0].name).toEqual("MIDI Out");
    }));
});
