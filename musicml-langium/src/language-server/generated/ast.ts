/******************************************************************************
 * This file was generated by langium-cli 1.0.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/

/* eslint-disable */
import { AstNode, AbstractAstReflection, ReferenceInfo, TypeMetaData } from 'langium';

export interface Bar extends AstNode {
    readonly $container: Track;
    readonly $type: 'Bar';
    notes: Array<Note>
    repeat?: number
}

export const Bar = 'Bar';

export function isBar(item: unknown): item is Bar {
    return reflection.isInstance(item, Bar);
}

export interface DrumNote extends AstNode {
    readonly $container: Note;
    readonly $type: 'DrumNote';
    notes: Array<string>
}

export const DrumNote = 'DrumNote';

export function isDrumNote(item: unknown): item is DrumNote {
    return reflection.isInstance(item, DrumNote);
}

export interface GlobalDirective extends AstNode {
    readonly $container: MusicPiece;
    readonly $type: 'GlobalDirective';
    midiClocksPerTick?: number
    notesPerMidiClock?: number
    tempo: number
    timeSignature: TimeSignature
}

export const GlobalDirective = 'GlobalDirective';

export function isGlobalDirective(item: unknown): item is GlobalDirective {
    return reflection.isInstance(item, GlobalDirective);
}

export interface MusicPiece extends AstNode {
    readonly $type: 'MusicPiece';
    composer?: string
    globalDirectives: GlobalDirective
    name: string
    tracks: Array<Track>
}

export const MusicPiece = 'MusicPiece';

export function isMusicPiece(item: unknown): item is MusicPiece {
    return reflection.isInstance(item, MusicPiece);
}

export interface NormalNote extends AstNode {
    readonly $container: Note;
    readonly $type: 'NormalNote';
    pitches: Array<Pitch>
}

export const NormalNote = 'NormalNote';

export function isNormalNote(item: unknown): item is NormalNote {
    return reflection.isInstance(item, NormalNote);
}

export interface Note extends AstNode {
    readonly $container: Bar;
    readonly $type: 'Note';
    channel?: number
    duration: number
    noteValue: DrumNote | NormalNote
    repeat?: number
    sequence?: string
    startTick?: number
    velocity?: number
    wait?: number
}

export const Note = 'Note';

export function isNote(item: unknown): item is Note {
    return reflection.isInstance(item, Note);
}

export interface Pitch extends AstNode {
    readonly $container: NormalNote;
    readonly $type: 'Pitch';
    accidental?: string
    octave: number
    value: string
}

export const Pitch = 'Pitch';

export function isPitch(item: unknown): item is Pitch {
    return reflection.isInstance(item, Pitch);
}

export interface TimeSignature extends AstNode {
    readonly $container: GlobalDirective;
    readonly $type: 'TimeSignature';
    beatsPerBar: number
    noteValue: number
}

export const TimeSignature = 'TimeSignature';

export function isTimeSignature(item: unknown): item is TimeSignature {
    return reflection.isInstance(item, TimeSignature);
}

export interface Track extends AstNode {
    readonly $container: MusicPiece;
    readonly $type: 'Track';
    bars: Array<Bar>
    instrument: string
    name: string
    startTick?: number
}

export const Track = 'Track';

export function isTrack(item: unknown): item is Track {
    return reflection.isInstance(item, Track);
}

export interface MusicMlAstType {
    Bar: Bar
    DrumNote: DrumNote
    GlobalDirective: GlobalDirective
    MusicPiece: MusicPiece
    NormalNote: NormalNote
    Note: Note
    Pitch: Pitch
    TimeSignature: TimeSignature
    Track: Track
}

export class MusicMlAstReflection extends AbstractAstReflection {

    getAllTypes(): string[] {
        return ['Bar', 'DrumNote', 'GlobalDirective', 'MusicPiece', 'NormalNote', 'Note', 'Pitch', 'TimeSignature', 'Track'];
    }

    protected override computeIsSubtype(subtype: string, supertype: string): boolean {
        switch (subtype) {
            default: {
                return false;
            }
        }
    }

    getReferenceType(refInfo: ReferenceInfo): string {
        const referenceId = `${refInfo.container.$type}:${refInfo.property}`;
        switch (referenceId) {
            default: {
                throw new Error(`${referenceId} is not a valid reference id.`);
            }
        }
    }

    getTypeMetaData(type: string): TypeMetaData {
        switch (type) {
            case 'Bar': {
                return {
                    name: 'Bar',
                    mandatory: [
                        { name: 'notes', type: 'array' }
                    ]
                };
            }
            case 'DrumNote': {
                return {
                    name: 'DrumNote',
                    mandatory: [
                        { name: 'notes', type: 'array' }
                    ]
                };
            }
            case 'MusicPiece': {
                return {
                    name: 'MusicPiece',
                    mandatory: [
                        { name: 'tracks', type: 'array' }
                    ]
                };
            }
            case 'NormalNote': {
                return {
                    name: 'NormalNote',
                    mandatory: [
                        { name: 'pitches', type: 'array' }
                    ]
                };
            }
            case 'Track': {
                return {
                    name: 'Track',
                    mandatory: [
                        { name: 'bars', type: 'array' }
                    ]
                };
            }
            default: {
                return {
                    name: type,
                    mandatory: []
                };
            }
        }
    }
}

export const reflection = new MusicMlAstReflection();
