import { IMIDIOutput } from "./wrappers/outputs/IMIDIOutput";
export declare class MIDIValOutput {
    private midiOutput;
    private defaultChannel;
    constructor(output: IMIDIOutput);
    /**
     * Sends raw message to MIDI out
     * @param msgs Message as an array of UInt8 values
     * @returns
     */
    send(msgs: Uint8Array | number[]): void;
    /**
     * Changes default channel the messages are sent on
     * @param channel Channel value. Integer between 1 and 16
     */
    setChannel(channel: number): void;
    private getChannel;
    /**
     * Creates MIDIValOutput based on the interface name
     * @param interfaceName Name of the interface
     * @returns MIDIValOutput object
     */
    static fromInterfaceName(interfaceName: string): Promise<MIDIValOutput>;
    private static getMidiAccess;
    /**
     * Sends note on message
     * @param note Note key value to be sent.
     * @param velocity Velocity - number between 0 and 128
     * @param channel Channel. By default will use channel set by setChannel method
     * @returns
     */
    sendNoteOn(note: number, velocity: number, channel?: number): void;
    /**
     * Sends note off message.
     * @param note Note key to be set off
     * @param channel Channel. By default will use channel set by setChannel method
     * @returns
     */
    sendNoteOff(note: number, channel?: number): void;
    sendPolyKeyPressure(key: number, velocity: number, channel?: number): void;
    sendControlChange(controller: number, value: number, channel?: number): void;
    sendProgramChange(program: number, channel?: number): void;
    sendChannelPressure(velocity: number, channel?: number): void;
    /**
     * Sends pitch bend value.
     * @param bendValue Ben value ranging from -1.0 to 1.0.
     * @param channel Optional channel on which bend should be sent on
     * @returns
     * @throws Throws exception if bendValue is outside the range.
     */
    sendPitchBend(bendValue: number, channel?: number): void;
    sendAllSoundOff(channel?: number): void;
    sendResetAllControllers(channel?: number): void;
    sendLocalControlOff(channel?: number): void;
    sendLocalControlOn(channel?: number): void;
    sendAllNotesOff(channel?: number): void;
    sendClockStart(): void;
    sendClockStop(): void;
    sendClockContinue(): void;
    sendClockPulse(): void;
    sendRPNSelection([msb, lsb]: readonly [number, number], channel?: number): void;
    sendRPDataMSB(data: number, channel?: number): void;
    sendRPDataLSB(data: number, channel?: number): void;
    incrementRPData(incrementValue: number, channel?: number): void;
    decrementRPData(decrementValue: number, channel?: number): void;
    sendRPNNull(): void;
    initializeMPE(lowerChannelSize: number, upperChannelSize: number, messageDelayMs?: number): Promise<void>;
    setPitchBendSensitivity(semitones: number, cents: number, channel?: number, messageDelayMs?: number): Promise<void>;
}
