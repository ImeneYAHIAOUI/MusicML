"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.splitValueIntoFraction = exports.uIntsIntoNumber = exports.splitNumberIntoUInt8s = exports.fractionToPitchBendAsUints = exports.fractionToPitchBend = void 0;
// Based on https://sites.uci.edu/camp2014/2014/04/30/managing-midi-pitchbend-messages/
const fractionToPitchBend = (n) => {
    if (n < -1.0 || n > 1.0) {
        throw new Error("Pitch bend value outside the range");
    }
    return Math.ceil(((n + 1) * 16383) / 2);
};
exports.fractionToPitchBend = fractionToPitchBend;
const fractionToPitchBendAsUints = (n) => {
    return (0, exports.splitNumberIntoUInt8s)((0, exports.fractionToPitchBend)(n));
};
exports.fractionToPitchBendAsUints = fractionToPitchBendAsUints;
const splitNumberIntoUInt8s = (n) => {
    let arr = [];
    // it's MIDI message so we are using only last 7 bits (first one is always 0).
    arr[0] = ((1 << 7) - 1) & n;
    arr[1] = n >> 7;
    return arr;
};
exports.splitNumberIntoUInt8s = splitNumberIntoUInt8s;
const uIntsIntoNumber = (arr) => {
    return arr[0] + (arr[1] << 7);
};
exports.uIntsIntoNumber = uIntsIntoNumber;
const splitValueIntoFraction = (arr) => {
    return ((0, exports.uIntsIntoNumber)(arr) / 16363 - 0.5) * 2;
};
exports.splitValueIntoFraction = splitValueIntoFraction;
