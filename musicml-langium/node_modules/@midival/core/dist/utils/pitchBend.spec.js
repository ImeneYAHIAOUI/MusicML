"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const pitchBend_1 = require("./pitchBend");
describe("Pitch bend utils", () => {
    it("should properly transform fraction to pitch bend value", () => {
        expect((0, pitchBend_1.fractionToPitchBend)(0)).toEqual(8192);
        expect((0, pitchBend_1.fractionToPitchBend)(1.0)).toEqual(16383);
        expect((0, pitchBend_1.fractionToPitchBend)(-1)).toEqual(0);
    });
    it("should throw exception for values outside the range", () => {
        expect(() => (0, pitchBend_1.fractionToPitchBend)(-2.0)).toThrow();
        expect(() => (0, pitchBend_1.fractionToPitchBend)(2.0)).toThrow();
    });
    it("should properly split numbers that are expected as bend values", () => {
        let nums = (0, pitchBend_1.splitNumberIntoUInt8s)(12280);
        expect(nums[0]).toEqual(120);
        expect(nums[1]).toEqual(95);
    });
    it("should properly transform array back to number", () => {
        expect((0, pitchBend_1.uIntsIntoNumber)([120, 95])).toEqual(12280);
    });
    it("should properly transform array to value from range -1 - 1.0", () => {
        expect((0, pitchBend_1.splitValueIntoFraction)([120, 95])).toBeCloseTo(0.5);
        expect((0, pitchBend_1.splitValueIntoFraction)([0, 0])).toBeCloseTo(-1);
        expect((0, pitchBend_1.splitValueIntoFraction)((0, pitchBend_1.fractionToPitchBendAsUints)(0))).toBeCloseTo(0);
        expect((0, pitchBend_1.splitValueIntoFraction)((0, pitchBend_1.fractionToPitchBendAsUints)(1))).toBeCloseTo(1);
    });
});
