"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const MIDIval_1 = require("./MIDIval");
const MIDIValInput_1 = require("./MIDIValInput");
const MockMIDIAccess_1 = require("./wrappers/access/MockMIDIAccess");
const MIDIMessageConvert_1 = require("./utils/MIDIMessageConvert");
const midiCommands_1 = require("./utils/midiCommands");
const midiControlChanges_1 = require("./utils/midiControlChanges");
const createInput = (props) => __awaiter(void 0, void 0, void 0, function* () {
    const access = yield MIDIval_1.MIDIVal.connect();
    const input = access.addInput(props);
    return { input: new MIDIValInput_1.MIDIValInput(input), mock: input };
});
describe("MIDIValInput", () => {
    beforeEach(() => {
        MIDIval_1.MIDIVal.configureAccessObject(new MockMIDIAccess_1.MockMIDIAccess());
    });
    it("should properly instantiate MIDIValInput object", () => __awaiter(void 0, void 0, void 0, function* () {
        const { input } = yield createInput({
            id: "1",
            name: "Input",
            manufacturer: "MIDIVal",
        });
        expect(input.constructor).toEqual(MIDIValInput_1.MIDIValInput);
    }));
    it(".noteOn", () => __awaiter(void 0, void 0, void 0, function* () {
        const { input, mock } = yield createInput({
            id: "1",
            name: "Input",
            manufacturer: "MIDIVal",
        });
        const allCallback = jest.fn();
        const note65Callback = jest.fn();
        const note66Callback = jest.fn();
        input.onAllNoteOn(allCallback);
        input.onNoteOn(65, note65Callback);
        input.onNoteOn(66, note66Callback);
        mock.sendMessage((0, MIDIMessageConvert_1.makeMessage)({
            channel: 1,
            command: midiCommands_1.MidiCommand.NoteOn,
            data1: 65,
            data2: 128,
        }));
        expect(allCallback).toBeCalledTimes(1);
        expect(note65Callback).toBeCalledTimes(1);
        expect(note66Callback).toBeCalledTimes(0);
        expect(allCallback.mock.calls[0][0]).toEqual({
            command: midiCommands_1.MidiCommand.NoteOn,
            channel: 1,
            data1: 65,
            data2: 128,
            note: 65,
            velocity: 128,
        });
    }));
    it(".noteOff", () => __awaiter(void 0, void 0, void 0, function* () {
        const { input, mock } = yield createInput({
            id: "1",
            name: "Input",
            manufacturer: "MIDIVal",
        });
        const allCallback = jest.fn();
        const note20Callback = jest.fn();
        const note50Callback = jest.fn();
        input.onAllNoteOff(allCallback);
        input.onNoteOff(20, note20Callback);
        input.onNoteOff(50, note50Callback);
        mock.sendMessage((0, MIDIMessageConvert_1.makeMessage)({
            channel: 1,
            command: midiCommands_1.MidiCommand.NoteOff,
            data1: 20,
            data2: 0, // velocity is usually ignored
        }));
        expect(allCallback).toBeCalledTimes(1);
        expect(note20Callback).toBeCalledTimes(1);
        expect(note50Callback).toBeCalledTimes(0);
        expect(allCallback.mock.calls[0][0]).toEqual({
            command: midiCommands_1.MidiCommand.NoteOff,
            channel: 1,
            data1: 20,
            data2: 0,
            note: 20,
            velocity: 0,
        });
    }));
    it(".onControlChange", () => __awaiter(void 0, void 0, void 0, function* () {
        const { input, mock } = yield createInput({
            id: "1",
            name: "Input",
            manufacturer: "MIDIVal",
        });
        const allCallback = jest.fn();
        const control20Change = jest.fn();
        const control21Change = jest.fn();
        input.onAllControlChange(allCallback);
        input.onControlChange(20, control20Change);
        input.onControlChange(21, control21Change);
        mock.sendMessage((0, MIDIMessageConvert_1.makeMessage)({
            channel: 1,
            command: midiCommands_1.MidiCommand.ControlChange,
            data1: 20,
            data2: 0,
        }));
        expect(allCallback).toBeCalledTimes(1);
        expect(control20Change).toBeCalledTimes(1);
        expect(control21Change).toBeCalledTimes(0);
        expect(allCallback.mock.calls[0][0]).toEqual({
            command: midiCommands_1.MidiCommand.ControlChange,
            channel: 1,
            data1: 20,
            data2: 0,
            control: 20,
            value: 0,
        });
    }));
    it(".onProgramChange", () => __awaiter(void 0, void 0, void 0, function* () {
        const { input, mock } = yield createInput({
            id: "1",
            name: "Input",
            manufacturer: "MIDIVal",
        });
        const allCallback = jest.fn();
        const program20Change = jest.fn();
        const program21Change = jest.fn();
        input.onAllProgramChange(allCallback);
        input.onProgramChange(20, program20Change);
        input.onProgramChange(21, program21Change);
        mock.sendMessage((0, MIDIMessageConvert_1.makeMessage)({
            command: midiCommands_1.MidiCommand.ProgramChange,
            channel: 1,
            data1: 20,
            data2: 23,
        }));
        expect(allCallback).toBeCalledTimes(1);
        expect(program20Change).toBeCalledTimes(1);
        expect(program21Change).toBeCalledTimes(0);
        expect(allCallback.mock.calls[0][0]).toEqual({
            command: midiCommands_1.MidiCommand.ProgramChange,
            channel: 1,
            data1: 20,
            data2: 23,
            program: 20,
            value: 23,
        });
    }));
    it(".onAllSoundsOff", () => __awaiter(void 0, void 0, void 0, function* () {
        const { input, mock } = yield createInput({
            id: "1",
            name: "Input",
            manufacturer: "MIDIVal",
        });
        const callback = jest.fn();
        const callback2 = jest.fn();
        const callback3 = jest.fn();
        input.onAllSoundsOff(callback);
        input.onControlChange(midiControlChanges_1.MidiControlChange.AllSoundsOff, callback2);
        input.onAllControlChange(callback3);
        mock.sendMessage((0, MIDIMessageConvert_1.makeMessage)({
            channel: 1,
            command: midiCommands_1.MidiCommand.ControlChange,
            data1: midiControlChanges_1.MidiControlChange.AllSoundsOff,
            data2: null,
        }));
        expect(callback3).toBeCalledTimes(1);
        expect(callback2).toBeCalledTimes(1);
        expect(callback).toBeCalledTimes(1);
    }));
    it(".onLocalControlChange", () => __awaiter(void 0, void 0, void 0, function* () {
        const { input, mock } = yield createInput({
            id: "1",
            name: "Input",
            manufacturer: "MIDIVal",
        });
        const callback = jest.fn();
        input.onLocalControlChange(callback);
        let msg = {
            channel: 1,
            command: midiCommands_1.MidiCommand.ControlChange,
            data1: midiControlChanges_1.MidiControlChange.LocalControlOnOff,
            data2: 127, // ON
        };
        mock.sendMessage((0, MIDIMessageConvert_1.makeMessage)(msg));
        expect(callback).toBeCalledTimes(1);
        expect(callback).toHaveBeenLastCalledWith(true, Object.assign(Object.assign({}, msg), { value: 127, control: midiControlChanges_1.MidiControlChange.LocalControlOnOff }));
        let msg2 = {
            channel: 1,
            command: midiCommands_1.MidiCommand.ControlChange,
            data1: midiControlChanges_1.MidiControlChange.LocalControlOnOff,
            data2: 0,
            control: midiControlChanges_1.MidiControlChange.LocalControlOnOff,
            value: 0,
        };
        mock.sendMessage((0, MIDIMessageConvert_1.makeMessage)(msg2));
        expect(callback).toBeCalledTimes(2);
        expect(callback).toHaveBeenLastCalledWith(false, msg2);
    }));
});
