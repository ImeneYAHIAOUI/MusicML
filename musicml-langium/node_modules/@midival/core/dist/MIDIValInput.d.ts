import { CallbackType, UnregisterCallback } from "@hypersphere/omnibus";
import { MidiMessage } from "./utils/MIDIMessageConvert";
import { IMIDIInput } from "./wrappers/inputs/IMIDIInput";
import { ControlChangeMessage, NoteMessage, ProgramChangeMessage } from "./types/messages";
import { MIDIRegisteredParameters } from "./utils/midiRegisteredParameters";
export interface PitchBendMessage {
    channel: number;
    value: number;
}
export interface RegisteredParameterData {
    channel: number;
    parameter: keyof typeof MIDIRegisteredParameters;
    msb: number;
    lsb: number;
}
interface EventDefinitions {
    pitchBend: [PitchBendMessage];
    sysex: [Uint8Array];
    channelPressure: [MidiMessage];
    noteOn: [NoteMessage];
    noteOff: [NoteMessage];
    controlChange: [ControlChangeMessage];
    programChange: [ProgramChangeMessage];
    polyKeyPressure: [MidiMessage];
    clockPulse: [];
    clockStart: [];
    clockStop: [];
    clockContinue: [];
    registeredParameterData: [RegisteredParameterData];
}
/**
 * MIDIVal Input Configuration Options
 */
export interface MIDIValInputOptions {
    computeClockTempo: boolean;
}
export declare class MIDIValInput {
    private unregisterInput;
    private omnibus;
    private midiInput;
    private tempoSamples;
    private options;
    private rpn;
    constructor(input: IMIDIInput, options?: MIDIValInputOptions);
    /**
     * Returns new MIDIValInput object based on the interface id.
     * @param interfaceId id of the interface from the MIDIAcces object.
     * @throws MIDIValError when interface id is not found.
     * @returns Promise resolving to MIDIValInput.
     */
    static fromInterfaceId(interfaceId: string, options?: MIDIValInputOptions): Promise<MIDIValInput>;
    /**
     * Finds first interface matching the name
     * @param interfaceName interface Name
     * @param options input configuration options
     * @throws MIDIValError when no interface with that name is found
     * @returns MIDIValInput object
     */
    static fromInterfaceName(interfaceName: string, options?: MIDIValInputOptions): Promise<MIDIValInput>;
    private static getMidiAccess;
    /**
     * Current MIDI Clock tempo
     * @throws MIDIValConfigurationError when computeClockTempo is not on.
     * @returns current tempo in BPM.
     */
    get tempo(): number;
    private registerInput;
    private isClockCommand;
    private onBusKeyValue;
    /**
     * Disconnects all listeners.
     */
    disconnect(): void;
    /**
     * Registers new callback on every note on event.
     * @param callback Callback that will get called on each note on event.
     * @returns Callback to unregister.
     */
    onAllNoteOn(callback: CallbackType<[NoteMessage]>): UnregisterCallback;
    /**
     * Registers new callback on specific note on event.
     * @param key the key number
     * @param callback Callback that gets called on every note on on this specific key
     * @returns Callback to unregister.
     */
    onNoteOn(key: number, callback: CallbackType<[NoteMessage]>): UnregisterCallback;
    /**
     * Registers new callback on all notes off.
     * @param callback Callback that gets called on every note off.
     * @returns Unregister callback
     */
    onAllNoteOff(callback: CallbackType<[NoteMessage]>): UnregisterCallback;
    /**
     * Registers new callback on specific note off.
     * @param key key number
     * @param callback Callback that gets called on every note off on this specific key
     * @returns Unregister callback
     */
    onNoteOff(key: number, callback: CallbackType<[NoteMessage]>): UnregisterCallback;
    /**
     * Registers new callback on pitch bend message
     * @param callback Callback that gets called on every pitch bend message. It gets value of the bend in the range of -1.0 to 1.0 using 16-bit precision (if supported by sending device).
     * @returns Unregister callback.
     */
    onPitchBend(callback: CallbackType<EventDefinitions["pitchBend"]>): UnregisterCallback;
    /**
     * Registers callback on every control change message
     * @param callback Callback that will get called on control change.
     * @returns Unregister callback.
     */
    onAllControlChange(callback: CallbackType<[ControlChangeMessage]>): UnregisterCallback;
    /**
     * Registers callback on specific control change key.
     * @param channel Control change channel value
     * @param callback Callback to be called
     * @returns Unregister function
     */
    onControlChange(control: number, callback: CallbackType<[MidiMessage]>): UnregisterCallback;
    /**
     * Registers callback to be called on every program change event
     * @param callback Callback to be called
     * @returns Unregister function.
     */
    onAllProgramChange(callback: CallbackType<[ProgramChangeMessage]>): UnregisterCallback;
    /**
     * Registers callback to be called on specific program change
     * @param key Program value for key change
     * @param callback Callback to be called
     * @returns Unregister function
     */
    onProgramChange(program: number, callback: CallbackType<[ProgramChangeMessage]>): UnregisterCallback;
    /**
     * Registers callback on all poly key pressure events
     * @param callback Callback to be called
     * @returns Unregister function
     */
    onAllPolyKeyPressure(callback: CallbackType<[MidiMessage]>): UnregisterCallback;
    /**
     * Registers callback on specific poly key pressure event
     * @param key Key for poly key pressure
     * @param callback Callback to be called
     * @returns Unregister function
     */
    onPolyKeyPressure(key: number, callback: CallbackType<[MidiMessage]>): UnregisterCallback;
    /**
     * Registers callback on sysex message
     * @param callback Callback to be called
     * @returns Unregister callback
     */
    onSysex(callback: CallbackType<[Uint8Array]>): UnregisterCallback;
    /**
     * Registers callback on all sounds off event
     * @param callback Callback to be called
     * @returns Unregister callback
     */
    onAllSoundsOff(callback: CallbackType<[ControlChangeMessage]>): UnregisterCallback;
    /**
     * Registers callback on reset all controllers event
     * @param callback Callback to be called
     * @returns Unregister callback
     */
    onResetAllControllers(callback: CallbackType<[ControlChangeMessage]>): UnregisterCallback;
    /**
     * Registers callback on local control change event
     * @param callback Callback to be called: first argument to the callback is a boolean representing if the local control was set on or off
     * @returns Unregister event
     */
    onLocalControlChange(callback: CallbackType<[
        isLocalControlOn: boolean,
        message: ControlChangeMessage
    ]>): UnregisterCallback;
    /**
     * Registers callback on all notes off
     * @param callback Callback to be called
     * @returns Unregister callback
     */
    onAllNotesOff(callback: CallbackType<[MidiMessage]>): UnregisterCallback;
    onChannelPressure(callback: CallbackType<EventDefinitions["channelPressure"]>): UnregisterCallback;
    onOmniModeOff(callback: CallbackType<[MidiMessage]>): UnregisterCallback;
    onOmniModeOn(callback: CallbackType<[MidiMessage]>): UnregisterCallback;
    onMonoModeOn(callback: CallbackType<[MidiMessage]>): UnregisterCallback;
    onPolyModeOn(callback: CallbackType<[MidiMessage]>): UnregisterCallback;
    onClockPulse(callback: CallbackType<[]>): UnregisterCallback;
    onClockStart(callback: CallbackType<[]>): UnregisterCallback;
    onClockStop(callback: CallbackType<[]>): UnregisterCallback;
    onClockContinue(callback: CallbackType<[]>): UnregisterCallback;
    onMpeConfiguration(callback: CallbackType<EventDefinitions["registeredParameterData"]>): UnregisterCallback;
    onPitchBendSensitivity(callback: CallbackType<EventDefinitions["registeredParameterData"]>): UnregisterCallback;
    onChannelFineTuning(callback: CallbackType<EventDefinitions["registeredParameterData"]>): UnregisterCallback;
    onChannelCoarseTuning(callback: CallbackType<EventDefinitions["registeredParameterData"]>): UnregisterCallback;
    onTuningProgramChange(callback: CallbackType<EventDefinitions["registeredParameterData"]>): UnregisterCallback;
    onTuningBankChange(callback: CallbackType<EventDefinitions["registeredParameterData"]>): UnregisterCallback;
    onModulationDepthChange(callback: CallbackType<EventDefinitions["registeredParameterData"]>): UnregisterCallback;
}
export {};
