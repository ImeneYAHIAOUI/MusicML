"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var _MPEOutputZone_notes;
Object.defineProperty(exports, "__esModule", { value: true });
exports.MPEOutputZone = void 0;
const ActiveNote_1 = require("./ActiveNote");
class MPEOutputZone {
    constructor(masterChannel, childChannelsRange, output) {
        this.masterChannel = masterChannel;
        this.childChannelsRange = childChannelsRange;
        this.output = output;
        _MPEOutputZone_notes.set(this, []);
    }
    getOpenChannel() {
        const ch = this.notesPerChannel;
        const min = Math.min(...Array.from(ch.values()));
        for (const [key, value] of ch.entries()) {
            if (value === min) {
                return key;
            }
        }
    }
    forEachMember(fn) {
        const [minCh, maxCh] = this.childChannelsRange;
        for (let i = minCh; i < maxCh; i++) {
            fn(i);
        }
    }
    get notesPerChannel() {
        const [minCh, maxCh] = this.childChannelsRange;
        const ch = new Map();
        for (let i = minCh; i < maxCh; i++) {
            ch.set(i, 0);
        }
        __classPrivateFieldGet(this, _MPEOutputZone_notes, "f").forEach((n) => {
            ch.set(n.channel, ch.get(n.channel) + 1);
        });
        // Filter out notes that are off
        __classPrivateFieldSet(this, _MPEOutputZone_notes, __classPrivateFieldGet(this, _MPEOutputZone_notes, "f").filter((n) => n.isActive), "f");
        return ch;
    }
    setMasterPitchBend(value) {
        this.output.sendPitchBend(value, this.masterChannel);
    }
    setMasterTimbre(value) {
        this.output.sendControlChange(74, value, this.masterChannel);
    }
    setMasterVelocity(value) {
        this.output.sendChannelPressure(value, this.masterChannel);
    }
    setMasterPitchBendSensitivity(semitones) {
        this.output.setPitchBendSensitivity(semitones, 0, this.masterChannel);
    }
    setMemberPitchBendSensitivity(semitones) {
        this.forEachMember((channel) => {
            this.output.setPitchBendSensitivity(semitones, 0, channel);
        });
    }
    sendNoteOn(note, velocity) {
        const channel = this.getOpenChannel();
        const activeNote = new ActiveNote_1.ActiveNote(note, velocity, channel, this.output);
        __classPrivateFieldGet(this, _MPEOutputZone_notes, "f").push(activeNote);
        return activeNote;
    }
}
exports.MPEOutputZone = MPEOutputZone;
_MPEOutputZone_notes = new WeakMap();
