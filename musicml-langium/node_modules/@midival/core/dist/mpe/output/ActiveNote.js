"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _ActiveNote_pitchBend, _ActiveNote_timbre, _ActiveNote_pressure, _ActiveNote_isActive;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ActiveNote = void 0;
class ActiveNote {
    constructor(note, velocity, channel, output) {
        this.note = note;
        this.velocity = velocity;
        this.channel = channel;
        this.output = output;
        _ActiveNote_pitchBend.set(this, 0);
        _ActiveNote_timbre.set(this, 0);
        _ActiveNote_pressure.set(this, 0);
        _ActiveNote_isActive.set(this, true);
        this.output.sendNoteOn(note, velocity, channel);
    }
    changePressure(pressure) {
        if (!this.isActive) {
            return;
        }
        this.output.sendChannelPressure(pressure, this.channel);
        __classPrivateFieldSet(this, _ActiveNote_pressure, pressure, "f");
    }
    changeBend(newBend) {
        if (!this.isActive) {
            return;
        }
        this.output.sendPitchBend(newBend, this.channel);
        __classPrivateFieldSet(this, _ActiveNote_pitchBend, newBend, "f");
    }
    changeTimbre(newSlide) {
        if (!this.isActive) {
            return;
        }
        this.output.sendControlChange(74, newSlide, this.channel);
        __classPrivateFieldSet(this, _ActiveNote_timbre, newSlide, "f");
    }
    get x() {
        return __classPrivateFieldGet(this, _ActiveNote_pitchBend, "f");
    }
    get y() {
        return __classPrivateFieldGet(this, _ActiveNote_timbre, "f");
    }
    get z() {
        return __classPrivateFieldGet(this, _ActiveNote_pressure, "f");
    }
    set x(newValue) {
        this.changeBend(newValue);
    }
    set y(newValue) {
        this.changeTimbre(newValue);
    }
    set z(newValue) {
        this.changePressure(newValue);
    }
    get pitchBend() {
        return __classPrivateFieldGet(this, _ActiveNote_pitchBend, "f");
    }
    get timbre() {
        return __classPrivateFieldGet(this, _ActiveNote_timbre, "f");
    }
    get pressure() {
        return __classPrivateFieldGet(this, _ActiveNote_pressure, "f");
    }
    get isActive() {
        return __classPrivateFieldGet(this, _ActiveNote_isActive, "f");
    }
    noteOff() {
        this.output.sendNoteOff(this.note, this.channel);
        __classPrivateFieldSet(this, _ActiveNote_isActive, false, "f");
    }
}
exports.ActiveNote = ActiveNote;
_ActiveNote_pitchBend = new WeakMap(), _ActiveNote_timbre = new WeakMap(), _ActiveNote_pressure = new WeakMap(), _ActiveNote_isActive = new WeakMap();
