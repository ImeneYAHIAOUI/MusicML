"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _MPEMidivalInput_lowerZone, _MPEMidivalInput_upperZone;
Object.defineProperty(exports, "__esModule", { value: true });
exports.MPEMidivalInput = void 0;
const omnibus_1 = require("@hypersphere/omnibus");
const MPEInputZone_1 = require("./MPEInputZone");
/**
 * Defines MIDIVal MPE Input connection
 */
class MPEMidivalInput {
    constructor(input, mpeDefaultZones) {
        this.input = input;
        this.eventBus = new omnibus_1.Omnibus();
        _MPEMidivalInput_lowerZone.set(this, void 0);
        _MPEMidivalInput_upperZone.set(this, void 0);
        input.onMpeConfiguration(({ channel, msb }) => {
            if (channel === 1) {
                this.instantiateLowerZone(msb);
            }
            if (channel === 16) {
                this.instantiateUpperZone(msb);
            }
        });
        if (mpeDefaultZones === null || mpeDefaultZones === void 0 ? void 0 : mpeDefaultZones.lowerZoneSize) {
            this.instantiateLowerZone(mpeDefaultZones.lowerZoneSize);
        }
        if (mpeDefaultZones === null || mpeDefaultZones === void 0 ? void 0 : mpeDefaultZones.upperZoneSize) {
            this.instantiateUpperZone(mpeDefaultZones.upperZoneSize);
        }
    }
    instantiateLowerZone(size) {
        if (!size) {
            __classPrivateFieldSet(this, _MPEMidivalInput_lowerZone, null, "f");
        }
        else {
            __classPrivateFieldSet(this, _MPEMidivalInput_lowerZone, new MPEInputZone_1.MPEInputZone(1, [2, 1 + size], this.input), "f");
        }
        this.eventBus.trigger("lowerZoneUpdate", __classPrivateFieldGet(this, _MPEMidivalInput_lowerZone, "f"));
    }
    instantiateUpperZone(size) {
        if (!size) {
            __classPrivateFieldSet(this, _MPEMidivalInput_upperZone, null, "f");
        }
        else {
            __classPrivateFieldSet(this, _MPEMidivalInput_upperZone, new MPEInputZone_1.MPEInputZone(16, [15 - size, 15], this.input), "f");
        }
        this.eventBus.trigger("upperZoneUpdate", __classPrivateFieldGet(this, _MPEMidivalInput_upperZone, "f"));
    }
    get isMpeEnabled() {
        return __classPrivateFieldGet(this, _MPEMidivalInput_lowerZone, "f") !== null || __classPrivateFieldGet(this, _MPEMidivalInput_upperZone, "f") !== null;
    }
    get lowerZone() {
        return __classPrivateFieldGet(this, _MPEMidivalInput_lowerZone, "f");
    }
    get upperZone() {
        return __classPrivateFieldGet(this, _MPEMidivalInput_upperZone, "f");
    }
    onLowerZoneUpdate(cb) {
        const callback = this.eventBus.on("lowerZoneUpdate", cb);
        if (this.lowerZone) {
            this.eventBus.trigger('lowerZoneUpdate', this.lowerZone);
        }
        return callback;
    }
    onUpperZoneUpdate(cb) {
        const callback = this.eventBus.on("upperZoneUpdate", cb);
        if (this.upperZone) {
            this.eventBus.trigger('upperZoneUpdate', this.upperZone);
        }
        return callback;
    }
}
exports.MPEMidivalInput = MPEMidivalInput;
_MPEMidivalInput_lowerZone = new WeakMap(), _MPEMidivalInput_upperZone = new WeakMap();
