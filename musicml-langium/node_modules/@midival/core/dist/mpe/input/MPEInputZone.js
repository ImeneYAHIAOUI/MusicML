"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _MPEInputZone_pitchBend, _MPEInputZone_timbre, _MPEInputZone_pressure;
Object.defineProperty(exports, "__esModule", { value: true });
exports.MPEInputZone = void 0;
const omnibus_1 = require("@hypersphere/omnibus");
class MPEInputZone {
    constructor(masterChannel, memberChannelRange, input) {
        this.masterChannel = masterChannel;
        this.memberChannelRange = memberChannelRange;
        this.input = input;
        this.eventBus = new omnibus_1.Omnibus();
        _MPEInputZone_pitchBend.set(this, 0);
        _MPEInputZone_timbre.set(this, 0);
        _MPEInputZone_pressure.set(this, 0);
        this.bindEvents();
    }
    bindEvents() {
        const [minCh, maxCh] = this.memberChannelRange;
        this.input.onAllNoteOn((note) => {
            if (note.channel >= minCh && note.channel <= maxCh) {
                this.eventBus.trigger("noteOn", note);
            }
        });
        this.input.onAllNoteOff((note) => {
            if (note.channel >= minCh && note.channel <= maxCh) {
                this.eventBus.trigger("noteOff", note);
            }
        });
        this.input.onPitchBend((pitchBend) => {
            if (pitchBend.channel === this.masterChannel) {
                this.eventBus.trigger("masterPitchBend", pitchBend);
                __classPrivateFieldSet(this, _MPEInputZone_pitchBend, pitchBend.value, "f");
                return;
            }
            if (pitchBend.channel >= minCh && pitchBend.channel <= maxCh) {
                this.eventBus.trigger("memberPitchBend", {
                    channel: pitchBend.channel,
                    memberPitchBend: pitchBend.value,
                    masterPitchBend: __classPrivateFieldGet(this, _MPEInputZone_pitchBend, "f"),
                });
            }
        });
        this.input.onChannelPressure((message) => {
            if (message.channel === this.masterChannel) {
                this.eventBus.trigger("masterPressure", {
                    channel: message.channel,
                    value: message.data2,
                });
                __classPrivateFieldSet(this, _MPEInputZone_pressure, message.data2, "f");
                return;
            }
            if (message.channel >= minCh && message.channel <= maxCh) {
                this.eventBus.trigger("memberPressure", {
                    channel: message.channel,
                    memberPressure: message.data2,
                    masterPressure: __classPrivateFieldGet(this, _MPEInputZone_pressure, "f"),
                });
            }
        });
        this.input.onControlChange(74, (message) => {
            if (message.channel === this.masterChannel) {
                this.eventBus.trigger("masterTimbre", {
                    channel: message.channel,
                    value: message.data2,
                });
                __classPrivateFieldSet(this, _MPEInputZone_timbre, message.data2, "f");
                return;
            }
            if (message.channel >= minCh && message.channel <= maxCh) {
                this.eventBus.trigger("memberTimbre", {
                    channel: message.channel,
                    memberTimbre: message.data2,
                    masterTimbre: __classPrivateFieldGet(this, _MPEInputZone_timbre, "f"),
                });
            }
        });
    }
    onNoteOn(cb) {
        return this.eventBus.on("noteOn", cb);
    }
    onNoteOff(cb) {
        return this.eventBus.on("noteOff", cb);
    }
    onMasterPitchBend(cb) {
        return this.eventBus.on("masterPitchBend", cb);
    }
    onMemberPitchBend(cb) {
        return this.eventBus.on("memberPitchBend", cb);
    }
    onMasterTimbre(cb) {
        return this.eventBus.on("masterTimbre", cb);
    }
    onMemberTimbre(cb) {
        return this.eventBus.on("memberTimbre", cb);
    }
    onMasterPressure(cb) {
        return this.eventBus.on("masterPressure", cb);
    }
    onMemberPressure(cb) {
        return this.eventBus.on("memberPressure", cb);
    }
}
exports.MPEInputZone = MPEInputZone;
_MPEInputZone_pitchBend = new WeakMap(), _MPEInputZone_timbre = new WeakMap(), _MPEInputZone_pressure = new WeakMap();
