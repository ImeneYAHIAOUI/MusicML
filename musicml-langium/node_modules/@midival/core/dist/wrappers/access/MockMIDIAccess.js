"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockMIDIAccess = void 0;
const MockMIDIOutput_1 = require("../outputs/MockMIDIOutput");
const MockMIDIInput_1 = require("../inputs/MockMIDIInput");
const omnibus_1 = require("@hypersphere/omnibus");
class MockMIDIAccess {
    constructor() {
        this.bus = new omnibus_1.Omnibus();
        this.mockInputs = [];
        this.mockOutputs = [];
    }
    onInputConnected(callback) {
        return this.bus.on("input_connected", callback);
    }
    onInputDisconnected(callback) {
        return this.bus.on("input_disconnected", callback);
    }
    onOutputConnected(callback) {
        return this.bus.on("output_connected", callback);
    }
    onOutputDisconnected(callback) {
        return this.bus.on("output_disconnected", callback);
    }
    connect() {
        return __awaiter(this, void 0, void 0, function* () {
            yield Promise.resolve();
        });
    }
    get inputs() {
        return this.mockInputs;
    }
    get outputs() {
        return this.mockOutputs;
    }
    addInput(props) {
        const input = new MockMIDIInput_1.MockMIDIInput(props);
        this.mockInputs.push(input);
        this.bus.trigger("input_connected", input);
        return input;
    }
    removeInput(device) {
        this.mockInputs = this.mockInputs.filter((x) => x !== device);
        this.bus.trigger("input_disconnected", device);
    }
    addOutput(props) {
        const output = new MockMIDIOutput_1.MockMIDIOutput(props);
        this.mockOutputs.push(output);
        this.bus.trigger("output_connected", output);
        return output;
    }
    removeOutput(device) {
        this.mockOutputs = this.mockOutputs.filter((x) => x !== device);
        this.bus.trigger("output_disconnected", device);
    }
}
exports.MockMIDIAccess = MockMIDIAccess;
