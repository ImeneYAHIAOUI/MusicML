"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const BrowserMIDIInput_1 = require("./BrowserMIDIInput");
const generateInput = () => ({
    id: "1234",
    name: "Input Name",
    manufacturer: "Input Manufacturer",
    addEventListener: jest.fn(),
    removeEventListener: jest.fn(),
    open: jest.fn(),
});
describe("BrowserMIDIInput", () => {
    it("should properly setup BrowserMIDIInput", () => {
        const inputObj = generateInput();
        const input = new BrowserMIDIInput_1.BrowserMIDIInput(inputObj);
        expect(input.name).toEqual("Input Name");
        expect(input.manufacturer).toEqual("Input Manufacturer");
        expect(input.id).toEqual("1234");
    });
    it("should properly call event listeners", () => __awaiter(void 0, void 0, void 0, function* () {
        const inputObj = generateInput();
        const input = new BrowserMIDIInput_1.BrowserMIDIInput(inputObj);
        const fn = jest.fn();
        const remove = yield input.onMessage(fn);
        expect(inputObj.addEventListener).toBeCalledWith("midimessage", fn);
        expect(inputObj.removeEventListener).not.toBeCalled();
        expect(inputObj.open).toBeCalled();
        remove();
        expect(inputObj.removeEventListener).toBeCalledWith("midimessage", fn);
    }));
});
