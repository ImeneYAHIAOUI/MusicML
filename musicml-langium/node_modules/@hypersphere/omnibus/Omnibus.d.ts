import { OmnibusRegistrator } from "./Registrator";
import { CallbackType, UnregisterCallback } from "./types";
export declare class Omnibus<EventDefinition extends Record<keyof EventDefinition, unknown[]> = Record<string, unknown[]>> {
    #private;
    constructor();
    on<T extends keyof EventDefinition>(event: T, fn: CallbackType<EventDefinition[T]>): UnregisterCallback;
    off<T extends keyof EventDefinition>(event: T, fn: CallbackType<EventDefinition[T]>): void;
    offAll(): void;
    trigger<T extends keyof EventDefinition>(event: T, ...args: EventDefinition[T]): Promise<void>;
    getRegistrator(): OmnibusRegistrator<EventDefinition>;
}
